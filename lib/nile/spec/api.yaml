openapi: 3.0.2
info:
  title: nile
  version: "0.1"
servers:
  - url: "https://admin.api.thenile.dev/v0"
paths:
  /auth/login:
    post:
      operationId: login
      summary: Log in to service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInfo"
      responses:
        "200":
          description: Authenticated token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
  /auth/validate:
    post:
      operationId: validate
      summary: Validate a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Token"
      responses:
        "204":
          description: The token is valid
        "400":
          description: The token is invalid
          content:
            application/json:
              schema:
                $ref: "./schemas/Error.yaml"

  /orgs:
    get:
      operationId: listOrganizations
      summary: List all Organizations.
      responses:
        "200":
          description: List of all Organizations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    post:
      operationId: createOrganization
      summary: Create a new Organization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationRequest"
      responses:
        "201":
          description: Created a new Organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"

  /orgs/{id}:
    parameters:
      - $ref: "#/components/parameters/idInPath"
    get:
      operationId: getOrganization
      summary: Get information for this Organization.
      responses:
        "200":
          description: The Organization with the requested ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
    patch:
      operationId: updateOrganization
      summary: Update this Organization.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchOrganizationRequest"
      responses:
        "200":
          description: The updated Organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
    delete:
      operationId: deleteOrganization
      summary: Delete this Organization.
      responses:
        204:
          description: Successful deletion of Organization.

  /users:
    get:
      parameters:
        - $ref: "#/components/parameters/orgIdInQuery"
        - name: email
          in: query
          description: User email.
          schema:
            type: string
      operationId: listUsers
      summary: List all Users.
      responses:
        "204":
          description: Returns if called unauthenticated, to check for the availability of an email.
        "200":
          description: List of all Users in Organization.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/User.yaml"
    post:
      operationId: createUser
      summary: Create a new User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: Created a new User.
          content:
            application/json:
              schema:
                $ref: "./schemas/User.yaml"

  /users/{id}:
    parameters:
      - $ref: "#/components/parameters/idInPath"
    get:
      operationId: getUser
      summary: Get information for this User.
      responses:
        "200":
          description: The User with the requested ID.
          content:
            application/json:
              schema:
                $ref: "./schemas/User.yaml"
    patch:
      operationId: updateUser
      summary: Update this User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUserRequest"
      responses:
        "200":
          description: The updated User.
          content:
            application/json:
              schema:
                $ref: "./schemas/User.yaml"
    delete:
      operationId: deleteUser
      summary: Delete this User.
      responses:
        204:
          description: Successful deletion of User.

  /invites:
    get:
      parameters:
        - $ref: "#/components/parameters/orgIdInQuery"
      operationId: listInvites
      summary: List all Invites.
      responses:
        "200":
          description: List of all Invites.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invite"

  /invites/{code}/accept:
    parameters:
      - $ref: "#/components/parameters/codeInPath"
    post:
      operationId: acceptInvite
      summary: Accept an invite.
      responses:
        "204":
          description: The accepted invite.
  /me:
    get:
      operationId: getMe
      summary: Get information about current authenticated user
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                $ref: "./schemas/User.yaml"

  /custom-data/{type}:
    parameters:
      - $ref: "./parameters/entityTypeInPath.yaml"
      - $ref: "#/components/parameters/orgIdInQuery"
    get:
      operationId: listInstances
      summary: List all instances
      responses:
        "200":
          description: List of all instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/Instance.yaml"
    post:
      operationId: createInstance
      summary: Create a new instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Created a new instance

  /custom-data/{type}/{id}:
    parameters:
      - $ref: "./parameters/entityTypeInPath.yaml"
      - $ref: "#/components/parameters/idInPath"
      - $ref: "#/components/parameters/orgIdInQuery"
    get:
      operationId: getInstance
      summary: Get an instance
      responses:
        "200":
          description: Get an instance
          content:
            application/json:
              schema:
                $ref: "./schemas/Instance.yaml"
    put:
      operationId: updateInstance
      summary: Update an instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/Instance.yaml"
      responses:
        "200":
          description: The updated instance
          content:
            application/json:
              schema:
                $ref: "./schemas/Instance.yaml"
    delete:
      operationId: deleteInstance
      summary: Delete an instance.
      responses:
        204:
          description: Successful deletion of the instance.

  /admin/entities:
    parameters:
      - $ref: "#/components/parameters/orgIdInQuery"
    get:
      operationId: listEntities
      summary: List all entities
      responses:
        "200":
          description: List of all entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
    post:
      operationId: createEntity
      summary: Create a new entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
      responses:
        "200":
          description: Created a new entity

  /admin/entities/{type}:
    parameters:
      - $ref: "./parameters/entityTypeInPath.yaml"
      - $ref: "#/components/parameters/orgIdInQuery"
    get:
      operationId: getEntity
      summary: Get information for this entity
      responses:
        "200":
          description: The entity with the requested ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
    patch:
      operationId: updateEntity
      summary: Update an entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchEntityRequest"
      responses:
        "200":
          description: The updated entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"

  /admin/entities/{type}/openapi:
    parameters:
      - $ref: "#/components/parameters/orgIdInQuery"
      - $ref: "./parameters/entityTypeInPath.yaml"
    get:
      operationId: getEntityOpenAPI
      summary: Gets openapi description for this entity
      responses:
        "200":
          description: The openapi for this entity
          content:
            application/yaml:
              schema:
                type: object

components:
  parameters:
    orgIdInQuery:
      in: query
      name: org_id
      schema:
        type: integer
      description: Org ID.
    codeInPath:
      in: path
      name: code
      schema:
        type: integer
      required: true
      description: Invite code.
    idInPath:
      in: path
      name: id
      schema:
        type: integer
      required: true
      description: Unique identifier.

  schemas:
    PatchEntityRequest:
      type: object
      # Requiring this since it's the only property.
      required:
        - schema
      properties:
        schema:
          type: object
    Entity:
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
        schema:
          type: object
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    LoginInfo:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    Organization:
      allOf:
        - $ref: "./schemas/Instance.yaml"
        - type: object
          required:
            - org_name
          properties:
            org_name:
              type: string
    CreateOrganizationRequest:
      type: object
      required:
        - name
      properties:
        org_name:
          type: string
    PatchOrganizationRequest:
      type: object
      required:
        - name
      properties:
        org_name:
          type: string
    CreateUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    PatchUserRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
    CreateInviteRequest:
      type: object
      required:
        - org_id
      properties:
        org_id:
          type: integer
    AcceptedInvite:
      type: object
      # TODO: Inherit from instance?
      properties:
        id:
          type: integer
        invite:
          description: The invite code.
          type: integer
        accepted_by:
          description: The user ID of the user that accepted the invite.
          type: integer
    Invite:
      type: object
      properties:
        code:
          type: integer
        org:
          type: integer
        inviter:
          type: integer
        status:
          type: string
          enum:
            - active
            # TODO - revoked
            # TODO - expired
