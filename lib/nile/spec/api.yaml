openapi: 3.0.1
info:
  title: Nile API
  description: Making SaaS chill.
  contact:
    email: support@thenile.dev
  version: "0.1"
paths:
  /auth/login:
    post:
      tags:
        - developers
      description: login a developer to nile
      operationId: loginDeveloper
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/LoginInfo"
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
  /auth/validate:
    post:
      tags:
        - developers
      description: validate a developer token
      operationId: validateDeveloper
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Token"
      responses:
        "204":
          description: valid token
        "400":
          description: invalid token
  /workspaces/{workspace}/auth/login:
    post:
      tags:
        - users
      summary: Login user
      description:
        "Login a user to Nile. This operation returns a JWT token. Most\
        \ Nile operations require authentication and expect this token in the 'Authorization:\
        \ Bearer <token>' header"
      operationId: loginUser
      parameters:
        - $ref: "#/components/parameters/workspace"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInfo"
        required: true
      responses:
        "200":
          description: JWT token for authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: Unauthorized
      x-code-samples:
        - lang: cURL
          source:
            "curl -X POST https://app.thenile.dev:443/auth/login -H 'Content-Type:\
            \ application/json' -D '{\"email\": \"shaun@colton.demo\",  \"password\"\
            : \"mycatname\"}"
        - lang: JS
          source: |-
            import Nile from "@theniledev/js";
            const nile = new Nile({ apiUrl: "http://localhost:8080", workspace: "1" });

            const body = {
              workspace: 56,
              loginInfo: {
                email: "shaun@colton.demo",
                password: "mycatname",
              },
            };

            nile
              .loginUser(body)
              .then((data) => {
                console.log("API called successfully. Returned data: " + data);
              })
              .catch((error: any) => console.error(error));
  /workspaces/{workspace}/auth/validate:
    post:
      tags:
        - users
      summary: Validate User Token
      description:
        "Validates a user token. Use this when using Nile authentication\
        \ to validate access to non-Nile resources. See the [Add Authentication Guide](https://nile-docs.vercel.app/docs/current/guides/how-to/add_signup_authn#decorating-the-endpoint)\
        \ for a full example"
      operationId: validateUser
      parameters:
        - $ref: "#/components/parameters/workspace"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Token"
        required: true
      responses:
        "204":
          description: The token is valid
        "400":
          description: The token is invalid
      x-code-samples:
        - lang: cURL
          source:
            "curl -X POST https://app.thenile.dev:443/auth/validate  -H 'Content-Type:\
            \ application/json' -D '{\"token\": \"token\"}'"
        - lang: JS
          source: |-
            import Nile from "@theniledev/js";

            const nile = new Nile({ apiUrl: "http://localhost:8080", workspace: "1" });

            const body = {
              workspace: 56,
              token: { token: "token" },
            };

            nile
              .validateUserToken(body)
              .then((data) => {
                console.log("API called successfully. Returned data: " + data);
              })
              .catch((error: any) => console.error(error));
  /developers:
    post:
      tags:
        - developers
      description: Create a developer
      operationId: createDeveloper
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        "201":
          description: The newly created developer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /workspaces/{workspace}/entities:
    get:
      tags:
        - entities
      description: List all Entities
      operationId: listEntities
      parameters:
        - $ref: "#/components/parameters/workspace"
      responses:
        "200":
          description: list of entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
    post:
      tags:
        - entities
      description: Create Entity
      operationId: createEntity
      parameters:
        - $ref: "#/components/parameters/workspace"
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Entity"
        required: true
      responses:
        "200":
          description: created entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
  /workspaces/{workspace}/entities/{type}:
    get:
      tags:
        - entities
      description: Get Entity
      operationId: getEntity
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: the entity with the requested type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
    patch:
      tags:
        - entities
      description: Update an Entity
      operationId: updateEntity
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: type
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PatchEntityRequest"
        required: true
      responses:
        "200":
          description: the updated entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
  /workspaces/{workspace}/entities/{type}/openapi:
    get:
      tags:
        - entities
      description: Get a yaml openapi description of an entity
      operationId: getOpenAPI
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/yaml:
              schema:
                type: string
  /workspaces/{workspace}/orgs/{org}/instances/{type}:
    get:
      tags:
        - entities
      description: " List all instances"
      operationId: listInstances
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Instance"
    post:
      tags:
        - entities
      description: Create a new Instance
      operationId: createInstance
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Json"
        required: true
      responses:
        "201":
          description: The newly created instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instance"
  /workspaces/{workspace}/orgs/{org}/instances/{type}/{id}:
    get:
      tags:
        - entities
      description: Get an instance
      operationId: getInstance
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instance"
    put:
      tags:
        - entities
      description: Update an instance
      operationId: updateInstance
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchInstanceRequest"
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Instance"
    delete:
      tags:
        - entities
      description: Delete an instance
      operationId: deleteInstance
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Successful instance deletion
  /workspaces/{workspace}/orgs/{org}/invites/{code}/accept:
    post:
      tags:
        - organizations
      description: Accept an invite
      operationId: acceptInvite
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: code
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Successful invite acceptance
  /workspaces/{workspace}/orgs/{org}/invites:
    get:
      tags:
        - organizations
      description: List all Invites
      operationId: listInvites
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invite"
  /workspaces/{workspace}/orgs:
    get:
      tags:
        - organizations
      description: List all Organizations
      operationId: listOrganizations
      parameters:
        - $ref: "#/components/parameters/workspace"
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    post:
      tags:
        - organizations
      description: Create a new organization
      operationId: createOrganization
      parameters:
        - $ref: "#/components/parameters/workspace"
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CreateOrganizationRequest"
      responses:
        "201":
          description: The newly created organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
  /workspaces/{workspace}/orgs/{org}:
    get:
      tags:
        - organizations
      description: Get an organization by name
      operationId: getOrganization
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
    delete:
      tags:
        - organizations
      description: Delete an organization by name
      operationId: deleteOrganization
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Successful org deletion
    patch:
      tags:
        - organizations
      description: Update an organization
      operationId: updateOrganization
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: org
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/PatchOrganizationRequest"
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
  /me:
    get:
      tags:
        - users
      description: Get information about current authenticated user
      operationId: me
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /workspaces/{workspace}/users:
    get:
      tags:
        - users
      description: List all users for an org
      operationId: listUsers
      parameters:
        - $ref: "#/components/parameters/workspace"
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - users
      description: Create a user
      operationId: createUser
      parameters:
        - $ref: "#/components/parameters/workspace"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        "201":
          description: The newly created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /workspaces/{workspace}/users/{id}:
    get:
      tags:
        - users
      description: Get a user by id
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
        - users
      description: Delete a user
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/workspace"
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Successful user deletion
  /workspaces:
    get:
      tags:
        - workspaces
      description: List all workspaces
      operationId: listWorkspaces
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    post:
      tags:
        - workspaces
      description: Create a workspace
      operationId: createWorkspace
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CreateOrganizationRequest"
        required: true
      responses:
        "201":
          description: The newly created workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
components:
  schemas:
    Json:
      type: object
      example:
        id: lkc-123
        memory: 4096
        cpus: 4
    Token:
      required:
        - token
      type: object
      properties:
        token:
          type: string
          description:
            JWT authentication token. Most Nile operations the caller to
            pass a valid token in Authorization HTTP header using Bearer schema
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    LoginInfo:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          description: The email of the user we are authenticating
          format: email
          example: shaun@colton.demo
        password:
          minLength: 1
          type: string
          description: The password of the user
          example: mycatname
    User:
      required:
        - email
        - id
        - type
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - user
            - developer
        email:
          type: string
          format: email
    CreateUserRequest:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          minLength: 1
          type: string
    Entity:
      required:
        - name
        - schema
      type: object
      properties:
        name:
          type: string
          example: clusters
        schema:
          $ref: "#/components/schemas/JsonSchema"
    JsonSchema:
      type: object
      example:
        type: object
        properties:
          id:
            type: string
          memory:
            type: integer
          cpus:
            type: integer
    PatchEntityRequest:
      required:
        - schema
      type: object
      properties:
        schema:
          $ref: "#/components/schemas/JsonSchema"
    Instance:
      required:
        - id
        - properties
        - type
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          description: The entity type of this instance
          example: clusters
        properties:
          $ref: "#/components/schemas/Json"
    PatchInstanceRequest:
      required:
        - properties
      type: object
      properties:
        properties:
          $ref: "#/components/schemas/Json"
    Invite:
      required:
        - code
        - inviter
        - org
        - status
      type: object
      properties:
        code:
          type: integer
          format: int32
        org:
          type: integer
          format: int32
        inviter:
          type: integer
          format: int32
        status:
          type: string
          enum:
            - active
    Organization:
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - organization
            - workspace
        name:
          type: string
    CreateOrganizationRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    PatchOrganizationRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
  parameters:
    workspace:
      name: workspace
      in: path
      description:
        The name of the Nile workspace where all the data-plane metadata
        for this user is stored
      required: true
      schema:
        type: string
